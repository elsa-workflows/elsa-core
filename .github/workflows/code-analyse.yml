name: .NET SonarCloud

on:
  push:
    branches:
      - feature/sonar-cloud
  pull_request:
    branches:
      - feature/sonar-cloud

jobs:
  build:
    name: Build and Analyze
    runs-on: ubuntu-latest

    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be avoided for SonarCloud analysis; depth 0 ensures the full history is fetched

      - name: Extract branch name
        run: |
          BRANCH_NAME=${{ github.ref }} # e.g., refs/heads/main
          BRANCH_NAME=${BRANCH_NAME#refs/heads/} # remove the refs/heads/ prefix
          # Extract the last part after the last slash of the branch name, if any, e.g., feature/issue-123 -> issue-123 and use it as the version prefix.
          PACKAGE_PREFIX=$(echo $BRANCH_NAME | rev | cut -d/ -f1 | rev | tr '_' '-')
          
          # If the branch name is main, use the preview version. Otherwise, use the branch name as the version prefix.
          if [[ "${BRANCH_NAME}" == "main" ]]; then
              PACKAGE_PREFIX="preview"
          fi
          
          echo "Ref: ${{ github.ref }}"
          echo "Branch name: ${BRANCH_NAME}"
          echo "Package prefix: ${PACKAGE_PREFIX}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
          echo "PACKAGE_PREFIX=${PACKAGE_PREFIX}" >> $GITHUB_ENV
          
      - name: Set VERSION variable
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* && "${{ github.event_name }}" == "release" && "${{ github.event.action }}" == "published" ]]; then
            TAG_NAME=${{ github.ref }} # e.g., refs/tags/3.0.0
            TAG_NAME=${TAG_NAME#refs/tags/} # remove the refs/tags/ prefix
            echo "VERSION=${TAG_NAME}" >> $GITHUB_ENV
          else
            echo "VERSION=3.2.0-${PACKAGE_PREFIX}.${{github.run_number}}" >> $GITHUB_ENV
          fi
          
      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Install Coverlet for code coverage
        run: dotnet tool install --global coverlet.console

      - name: Begin SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner begin /k:"elsa-workflows_elsa-core" /o:"elsa-workflows" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Compile+Test+Pack
        run: ./build.sh Compile+Test+Pack --version ${VERSION} --analyseCode true

      - name: End SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
