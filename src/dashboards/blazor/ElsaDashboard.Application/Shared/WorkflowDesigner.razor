@using ElsaDashboard.Application.Extensions

@{
    var renderedActivities = new HashSet<string>();
}

<div class="flex flex-1 relative">
    <div id="workflow-canvas" class="flex-1 flex">
        <div class="flex-1 text-gray-200">
            <div class="p-10">

                <div class="canvas select-none">
                    <div class="tree">
                        <ul>
                            <li>
                                <div class="inline-flex flex flex-col items-center">
                                    <button id="start-button"
                                            type="button"
                                            class="px-6 py-3 border border-transparent text-base leading-6 font-medium rounded-md text-white bg-green-600 hover:bg-green-500 focus:outline-none focus:border-green-700 focus:shadow-outline-green active:bg-green-700 transition ease-in-out duration-150"
                                            @onclick="@(async e => await OnAddActivityClick(null, null, null))">
                                        Start
                                    </button>
                                </div>
                                @RenderTree(GetRootActivities(), true, OnAddActivityClick, renderedActivities)
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <FlyoutPanel/>
</div>

@code {

    private RenderFragment RenderOutcomeButton(string id, string outcome, Func<Task> callback) =>
        @<div class="my-6 flex flex-col items-center">
            @if (!string.IsNullOrEmpty(outcome))
            {
                <div class="mb-4 relative z-10 px-2.5 py-0.5 rounded-full text-xs font-medium leading-4 bg-cool-gray-100 text-cool-gray-800 capitalize">@outcome</div>
            }
            <a @key="@id" id="@id" href="#" @onclick:preventDefault @onclick="@callback">
                <svg class="h-8 w-8 text-gray-400 hover:text-blue-500 cursor-pointer" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v3m0 0v3m0-3h3m-3 0H9m12 0a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
            </a>
        </div>;

    private RenderFragment RenderOutcomeButtons(ActivityModel activity, Func<string, string, string, Task> onAddActivityClickHandler)
    {
        var activityId = activity.ActivityId;

        return
            @<div class="flex flex-row space-x-6">
                @foreach (var outcome in activity.Outcomes)
                {
                    @RenderOutcomeButton($"{activityId}-{outcome}", outcome, () => onAddActivityClickHandler(activityId, null, outcome))
                }
            </div>;
    }

    private RenderFragment? RenderTree(IEnumerable<ActivityModel> activities, bool isRoot, Func<string, string, string, Task> onAddActivityClickHandler, HashSet<string> renderedActivities)
    {
        var list = activities.Where(x => !renderedActivities.Contains(x.ActivityId)).ToList();
        var cssClass = isRoot ? "root" : default!;

        foreach (var activity in list)
            renderedActivities.Add(activity.ActivityId);

        if (!list.Any())
            return null;

        return
            @<ul class="@cssClass">
                @foreach (var activity in list)
                {
                    var activityId = activity.ActivityId;
                    var children = Model.GetChildActivities(activityId).ToList();

                    <li @key=@activityId>
                        <div class="inline-flex flex flex-col items-center">

                            @if (isRoot)
                            {
                                @RenderOutcomeButton($"start-button-plus-{activityId}", "", () => onAddActivityClickHandler(null, activityId, null))
                            }

                            <Activity Model="@activity"/>
                            @RenderOutcomeButtons(activity, onAddActivityClickHandler)
                        </div>
                        @if (children.Any())
                        {
                            @RenderTree(children, false, onAddActivityClickHandler, renderedActivities)
                        }
                    </li>
                }
            </ul>;
    }

}