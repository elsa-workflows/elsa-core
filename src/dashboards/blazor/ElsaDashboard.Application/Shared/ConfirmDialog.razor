<ModalLayout AccentColor="blue">
    <Icon>
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
    </Icon>
    <ChildContent>
        @Message
    </ChildContent>
    <Buttons>
        <button type="button"
                @onclick="@OnConfirmClick"
                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:ml-3 sm:w-auto sm:text-sm">
            @ConfirmButtonText
        </button>
        <button type="button"
                @onclick="@OnCancelClick"
                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm">
            Cancel
        </button>
    </Buttons>
</ModalLayout>

@code
{
    [CascadingParameter]
    public BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public string Message { get; set; } = default!;

    [Parameter]
    public string ConfirmButtonText { get; set; } = "Yes";

    private async Task OnConfirmClick() => await BlazoredModal.Close(ModalResult.Ok(true));
    private async Task OnCancelClick() => await BlazoredModal.Cancel();
}