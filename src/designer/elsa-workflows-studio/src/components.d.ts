/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActivityDefinitionProperty, ActivityDescriptor, ActivityModel, ActivityPropertyDescriptor, ElsaStudio, OrderBy, SelectListItem, VersionOptions, WorkflowBlueprint, WorkflowDefinition, WorkflowExecutionLogRecord, WorkflowModel, WorkflowStatus } from "./models";
import { LocationSegments, MatchResults, RouterHistory } from "@stencil/router";
import { MenuItem } from "./components/controls/elsa-context-menu/models";
import { VNode } from "@stencil/core";
import { ActivityContextMenuState, LayoutDirection, WorkflowDesignerMode } from "./components/designers/tree/elsa-designer-tree/models";
import { DropdownButtonItem, DropdownButtonOrigin } from "./components/controls/elsa-dropdown-button/models";
import { MonacoValueChangedArgs } from "./components/controls/elsa-monaco/elsa-monaco";
import { Map } from "./utils/utils";
import { PagerData } from "./components/controls/elsa-pager/elsa-pager";
import { ToastNotificationOptions } from "./components/shared/elsa-toast-notification/elsa-toast-notification";
import { WebhookDefinition } from "./modules/elsa-webhooks/models";
export namespace Components {
    interface ElsaActivityEditorModal {
        "culture": string;
    }
    interface ElsaActivityPickerModal {
    }
    interface ElsaCheckListProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "serverUrl": string;
    }
    interface ElsaCheckboxProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface ElsaConfirmDialog {
        "culture": string;
        "hide": () => Promise<void>;
        "show": (caption: string, message: string) => Promise<boolean>;
    }
    interface ElsaContextMenu {
        "history": RouterHistory;
        "menuItems": Array<MenuItem>;
    }
    interface ElsaControl {
        "content": VNode | string | Element;
    }
    interface ElsaDesignerTree {
        "activityBorderColor"?: (activity: ActivityModel) => string;
        "activityContextMenu"?: ActivityContextMenuState;
        "activityContextMenuButton"?: (activity: ActivityModel) => string;
        "connectionContextMenu"?: ActivityContextMenuState;
        "enableMultipleConnectionsFromSingleSource": boolean;
        "layoutDirection": LayoutDirection;
        "mode": WorkflowDesignerMode;
        "model": WorkflowModel;
        "removeActivity": (activity: ActivityModel) => Promise<void>;
        "selectedActivityIds": Array<string>;
        "showActivityEditor": (activity: ActivityModel, animate: boolean) => Promise<void>;
    }
    interface ElsaDropdownButton {
        "icon"?: any;
        "items": Array<DropdownButtonItem>;
        "origin": DropdownButtonOrigin;
        "text": string;
    }
    interface ElsaDropdownProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "serverUrl": string;
    }
    interface ElsaExpressionEditor {
        "context"?: string;
        "editorHeight": string;
        "expression": string;
        "language": string;
        "padding": string;
        "serverUrl": string;
        "setExpression": (value: string) => Promise<void>;
        "singleLineMode": boolean;
        "workflowDefinitionId": string;
    }
    interface ElsaInputTags {
        "fieldId"?: string;
        "fieldName"?: string;
        "placeHolder"?: string;
        "values"?: Array<string>;
    }
    interface ElsaInputTagsDropdown {
        "dropdownValues"?: Array<SelectListItem>;
        "fieldId"?: string;
        "fieldName"?: string;
        "placeHolder"?: string;
        "values"?: Array<string | SelectListItem>;
    }
    interface ElsaJsonProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface ElsaModalDialog {
        "hide": (animate: boolean) => Promise<void>;
        "show": (animate: boolean) => Promise<void>;
    }
    interface ElsaMonaco {
        "addJavaScriptLib": (libSource: string, libUri: string) => Promise<void>;
        "editorHeight": string;
        "language": string;
        "padding": string;
        "setValue": (value: string) => Promise<void>;
        "singleLineMode": boolean;
        "value": string;
    }
    interface ElsaMultiExpressionEditor {
        "context"?: string;
        "defaultSyntax": string;
        "editorHeight": string;
        "expressions": Map<string>;
        "fieldName"?: string;
        "isReadOnly"?: boolean;
        "label": string;
        "singleLineMode": boolean;
        "supportedSyntaxes": Array<string>;
        "syntax"?: string;
    }
    interface ElsaMultiLineProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface ElsaMultiTextProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "serverUrl": string;
    }
    interface ElsaPager {
        "culture": string;
        "history"?: RouterHistory;
        "location": LocationSegments;
        "page": number;
        "pageSize": number;
        "totalCount": number;
    }
    interface ElsaPropertyEditor {
        "context"?: string;
        "editorHeight": string;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "showLabel": boolean;
        "singleLineMode": boolean;
    }
    interface ElsaRadioListProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "serverUrl": string;
    }
    interface ElsaScriptProperty {
        "context"?: string;
        "editorHeight": string;
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
        "serverUrl": string;
        "singleLineMode": boolean;
        "syntax"?: string;
        "workflowDefinitionId": string;
    }
    interface ElsaSingleLineProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface ElsaStudioDashboard {
        "basePath": string;
        "culture": string;
    }
    interface ElsaStudioHome {
        "culture": string;
    }
    interface ElsaStudioRoot {
        "addPlugin": (pluginType: any) => Promise<void>;
        "addPlugins": (pluginTypes: Array<any>) => Promise<void>;
        "basePath": string;
        "culture": string;
        "featuresString": string;
        "monacoLibPath": string;
        "serverUrl": string;
    }
    interface ElsaStudioWebhookDefinitionsEdit {
        "match": MatchResults;
    }
    interface ElsaStudioWebhookDefinitionsList {
        "basePath": string;
        "culture": string;
    }
    interface ElsaStudioWorkflowBlueprintView {
        "match": MatchResults;
    }
    interface ElsaStudioWorkflowDefinitionsEdit {
        "match": MatchResults;
    }
    interface ElsaStudioWorkflowDefinitionsList {
        "basePath": string;
        "culture": string;
        "history": RouterHistory;
    }
    interface ElsaStudioWorkflowInstancesList {
        "culture": string;
    }
    interface ElsaStudioWorkflowInstancesView {
        "match": MatchResults;
    }
    interface ElsaStudioWorkflowRegistry {
        "basePath": string;
        "culture": string;
    }
    interface ElsaSwitchCasesProperty {
        "propertyDescriptor": ActivityPropertyDescriptor;
        "propertyModel": ActivityDefinitionProperty;
    }
    interface ElsaToastNotification {
        "hide": () => Promise<void>;
        "show": (options: ToastNotificationOptions) => Promise<void>;
    }
    interface ElsaWebhookDefinitionEditorNotifications {
    }
    interface ElsaWebhookDefinitionEditorScreen {
        "culture": string;
        "getServerUrl": () => Promise<string>;
        "getWebhookId": () => Promise<string>;
        "history"?: RouterHistory;
        "serverUrl": string;
        "webhookDefinition": WebhookDefinition;
        "webhookId": string;
    }
    interface ElsaWebhookDefinitionsListScreen {
        "basePath": string;
        "culture": string;
        "history"?: RouterHistory;
        "serverUrl": string;
    }
    interface ElsaWorkflowBlueprintSidePanel {
        "serverUrl": string;
        "workflowId": string;
    }
    interface ElsaWorkflowBlueprintViewerScreen {
        "culture": string;
        "getServerUrl": () => Promise<string>;
        "serverUrl": string;
        "workflowDefinitionId": string;
    }
    interface ElsaWorkflowDefinitionEditorNotifications {
    }
    interface ElsaWorkflowDefinitionEditorScreen {
        "culture": string;
        "exportWorkflow": () => Promise<void>;
        "getServerUrl": () => Promise<string>;
        "getWorkflowDefinitionId": () => Promise<string>;
        "history": RouterHistory;
        "importWorkflow": (file: File) => Promise<void>;
        "monacoLibPath": string;
        "serverUrl": string;
        "workflowDefinitionId": string;
    }
    interface ElsaWorkflowDefinitionsListScreen {
        "basePath": string;
        "culture": string;
        "history"?: RouterHistory;
        "serverUrl": string;
    }
    interface ElsaWorkflowInstanceJournal {
        "activityDescriptors": Array<ActivityDescriptor>;
        "hide": () => Promise<void>;
        "selectActivityRecord": (activityId?: string) => Promise<void>;
        "serverUrl": string;
        "show": () => Promise<void>;
        "workflowBlueprint": WorkflowBlueprint;
        "workflowInstanceId": string;
        "workflowModel": WorkflowModel;
    }
    interface ElsaWorkflowInstanceListScreen {
        "basePath": string;
        "culture": string;
        "getSelectedWorkflowInstanceIds": () => Promise<string[]>;
        "history"?: RouterHistory;
        "orderBy"?: OrderBy;
        "refresh": () => Promise<void>;
        "serverUrl": string;
        "workflowId"?: string;
        "workflowStatus"?: WorkflowStatus;
    }
    interface ElsaWorkflowInstanceViewerScreen {
        "culture": string;
        "getServerUrl": () => Promise<string>;
        "serverUrl": string;
        "workflowInstanceId": string;
    }
    interface ElsaWorkflowPropertiesPanel {
        "culture": string;
        "expandButtonPosition": number;
        "serverUrl": string;
        "workflowDefinition": WorkflowDefinition;
    }
    interface ElsaWorkflowPublishButton {
        "culture": string;
        "publishing": boolean;
        "workflowDefinition": WorkflowDefinition;
    }
    interface ElsaWorkflowRegistryListScreen {
        "basePath": string;
        "culture": string;
        "history"?: RouterHistory;
        "serverUrl": string;
    }
    interface ElsaWorkflowSettingsModal {
        "serverUrl": string;
        "workflowDefinition": WorkflowDefinition;
    }
}
declare global {
    interface HTMLElsaActivityEditorModalElement extends Components.ElsaActivityEditorModal, HTMLStencilElement {
    }
    var HTMLElsaActivityEditorModalElement: {
        prototype: HTMLElsaActivityEditorModalElement;
        new (): HTMLElsaActivityEditorModalElement;
    };
    interface HTMLElsaActivityPickerModalElement extends Components.ElsaActivityPickerModal, HTMLStencilElement {
    }
    var HTMLElsaActivityPickerModalElement: {
        prototype: HTMLElsaActivityPickerModalElement;
        new (): HTMLElsaActivityPickerModalElement;
    };
    interface HTMLElsaCheckListPropertyElement extends Components.ElsaCheckListProperty, HTMLStencilElement {
    }
    var HTMLElsaCheckListPropertyElement: {
        prototype: HTMLElsaCheckListPropertyElement;
        new (): HTMLElsaCheckListPropertyElement;
    };
    interface HTMLElsaCheckboxPropertyElement extends Components.ElsaCheckboxProperty, HTMLStencilElement {
    }
    var HTMLElsaCheckboxPropertyElement: {
        prototype: HTMLElsaCheckboxPropertyElement;
        new (): HTMLElsaCheckboxPropertyElement;
    };
    interface HTMLElsaConfirmDialogElement extends Components.ElsaConfirmDialog, HTMLStencilElement {
    }
    var HTMLElsaConfirmDialogElement: {
        prototype: HTMLElsaConfirmDialogElement;
        new (): HTMLElsaConfirmDialogElement;
    };
    interface HTMLElsaContextMenuElement extends Components.ElsaContextMenu, HTMLStencilElement {
    }
    var HTMLElsaContextMenuElement: {
        prototype: HTMLElsaContextMenuElement;
        new (): HTMLElsaContextMenuElement;
    };
    interface HTMLElsaControlElement extends Components.ElsaControl, HTMLStencilElement {
    }
    var HTMLElsaControlElement: {
        prototype: HTMLElsaControlElement;
        new (): HTMLElsaControlElement;
    };
    interface HTMLElsaDesignerTreeElement extends Components.ElsaDesignerTree, HTMLStencilElement {
    }
    var HTMLElsaDesignerTreeElement: {
        prototype: HTMLElsaDesignerTreeElement;
        new (): HTMLElsaDesignerTreeElement;
    };
    interface HTMLElsaDropdownButtonElement extends Components.ElsaDropdownButton, HTMLStencilElement {
    }
    var HTMLElsaDropdownButtonElement: {
        prototype: HTMLElsaDropdownButtonElement;
        new (): HTMLElsaDropdownButtonElement;
    };
    interface HTMLElsaDropdownPropertyElement extends Components.ElsaDropdownProperty, HTMLStencilElement {
    }
    var HTMLElsaDropdownPropertyElement: {
        prototype: HTMLElsaDropdownPropertyElement;
        new (): HTMLElsaDropdownPropertyElement;
    };
    interface HTMLElsaExpressionEditorElement extends Components.ElsaExpressionEditor, HTMLStencilElement {
    }
    var HTMLElsaExpressionEditorElement: {
        prototype: HTMLElsaExpressionEditorElement;
        new (): HTMLElsaExpressionEditorElement;
    };
    interface HTMLElsaInputTagsElement extends Components.ElsaInputTags, HTMLStencilElement {
    }
    var HTMLElsaInputTagsElement: {
        prototype: HTMLElsaInputTagsElement;
        new (): HTMLElsaInputTagsElement;
    };
    interface HTMLElsaInputTagsDropdownElement extends Components.ElsaInputTagsDropdown, HTMLStencilElement {
    }
    var HTMLElsaInputTagsDropdownElement: {
        prototype: HTMLElsaInputTagsDropdownElement;
        new (): HTMLElsaInputTagsDropdownElement;
    };
    interface HTMLElsaJsonPropertyElement extends Components.ElsaJsonProperty, HTMLStencilElement {
    }
    var HTMLElsaJsonPropertyElement: {
        prototype: HTMLElsaJsonPropertyElement;
        new (): HTMLElsaJsonPropertyElement;
    };
    interface HTMLElsaModalDialogElement extends Components.ElsaModalDialog, HTMLStencilElement {
    }
    var HTMLElsaModalDialogElement: {
        prototype: HTMLElsaModalDialogElement;
        new (): HTMLElsaModalDialogElement;
    };
    interface HTMLElsaMonacoElement extends Components.ElsaMonaco, HTMLStencilElement {
    }
    var HTMLElsaMonacoElement: {
        prototype: HTMLElsaMonacoElement;
        new (): HTMLElsaMonacoElement;
    };
    interface HTMLElsaMultiExpressionEditorElement extends Components.ElsaMultiExpressionEditor, HTMLStencilElement {
    }
    var HTMLElsaMultiExpressionEditorElement: {
        prototype: HTMLElsaMultiExpressionEditorElement;
        new (): HTMLElsaMultiExpressionEditorElement;
    };
    interface HTMLElsaMultiLinePropertyElement extends Components.ElsaMultiLineProperty, HTMLStencilElement {
    }
    var HTMLElsaMultiLinePropertyElement: {
        prototype: HTMLElsaMultiLinePropertyElement;
        new (): HTMLElsaMultiLinePropertyElement;
    };
    interface HTMLElsaMultiTextPropertyElement extends Components.ElsaMultiTextProperty, HTMLStencilElement {
    }
    var HTMLElsaMultiTextPropertyElement: {
        prototype: HTMLElsaMultiTextPropertyElement;
        new (): HTMLElsaMultiTextPropertyElement;
    };
    interface HTMLElsaPagerElement extends Components.ElsaPager, HTMLStencilElement {
    }
    var HTMLElsaPagerElement: {
        prototype: HTMLElsaPagerElement;
        new (): HTMLElsaPagerElement;
    };
    interface HTMLElsaPropertyEditorElement extends Components.ElsaPropertyEditor, HTMLStencilElement {
    }
    var HTMLElsaPropertyEditorElement: {
        prototype: HTMLElsaPropertyEditorElement;
        new (): HTMLElsaPropertyEditorElement;
    };
    interface HTMLElsaRadioListPropertyElement extends Components.ElsaRadioListProperty, HTMLStencilElement {
    }
    var HTMLElsaRadioListPropertyElement: {
        prototype: HTMLElsaRadioListPropertyElement;
        new (): HTMLElsaRadioListPropertyElement;
    };
    interface HTMLElsaScriptPropertyElement extends Components.ElsaScriptProperty, HTMLStencilElement {
    }
    var HTMLElsaScriptPropertyElement: {
        prototype: HTMLElsaScriptPropertyElement;
        new (): HTMLElsaScriptPropertyElement;
    };
    interface HTMLElsaSingleLinePropertyElement extends Components.ElsaSingleLineProperty, HTMLStencilElement {
    }
    var HTMLElsaSingleLinePropertyElement: {
        prototype: HTMLElsaSingleLinePropertyElement;
        new (): HTMLElsaSingleLinePropertyElement;
    };
    interface HTMLElsaStudioDashboardElement extends Components.ElsaStudioDashboard, HTMLStencilElement {
    }
    var HTMLElsaStudioDashboardElement: {
        prototype: HTMLElsaStudioDashboardElement;
        new (): HTMLElsaStudioDashboardElement;
    };
    interface HTMLElsaStudioHomeElement extends Components.ElsaStudioHome, HTMLStencilElement {
    }
    var HTMLElsaStudioHomeElement: {
        prototype: HTMLElsaStudioHomeElement;
        new (): HTMLElsaStudioHomeElement;
    };
    interface HTMLElsaStudioRootElement extends Components.ElsaStudioRoot, HTMLStencilElement {
    }
    var HTMLElsaStudioRootElement: {
        prototype: HTMLElsaStudioRootElement;
        new (): HTMLElsaStudioRootElement;
    };
    interface HTMLElsaStudioWebhookDefinitionsEditElement extends Components.ElsaStudioWebhookDefinitionsEdit, HTMLStencilElement {
    }
    var HTMLElsaStudioWebhookDefinitionsEditElement: {
        prototype: HTMLElsaStudioWebhookDefinitionsEditElement;
        new (): HTMLElsaStudioWebhookDefinitionsEditElement;
    };
    interface HTMLElsaStudioWebhookDefinitionsListElement extends Components.ElsaStudioWebhookDefinitionsList, HTMLStencilElement {
    }
    var HTMLElsaStudioWebhookDefinitionsListElement: {
        prototype: HTMLElsaStudioWebhookDefinitionsListElement;
        new (): HTMLElsaStudioWebhookDefinitionsListElement;
    };
    interface HTMLElsaStudioWorkflowBlueprintViewElement extends Components.ElsaStudioWorkflowBlueprintView, HTMLStencilElement {
    }
    var HTMLElsaStudioWorkflowBlueprintViewElement: {
        prototype: HTMLElsaStudioWorkflowBlueprintViewElement;
        new (): HTMLElsaStudioWorkflowBlueprintViewElement;
    };
    interface HTMLElsaStudioWorkflowDefinitionsEditElement extends Components.ElsaStudioWorkflowDefinitionsEdit, HTMLStencilElement {
    }
    var HTMLElsaStudioWorkflowDefinitionsEditElement: {
        prototype: HTMLElsaStudioWorkflowDefinitionsEditElement;
        new (): HTMLElsaStudioWorkflowDefinitionsEditElement;
    };
    interface HTMLElsaStudioWorkflowDefinitionsListElement extends Components.ElsaStudioWorkflowDefinitionsList, HTMLStencilElement {
    }
    var HTMLElsaStudioWorkflowDefinitionsListElement: {
        prototype: HTMLElsaStudioWorkflowDefinitionsListElement;
        new (): HTMLElsaStudioWorkflowDefinitionsListElement;
    };
    interface HTMLElsaStudioWorkflowInstancesListElement extends Components.ElsaStudioWorkflowInstancesList, HTMLStencilElement {
    }
    var HTMLElsaStudioWorkflowInstancesListElement: {
        prototype: HTMLElsaStudioWorkflowInstancesListElement;
        new (): HTMLElsaStudioWorkflowInstancesListElement;
    };
    interface HTMLElsaStudioWorkflowInstancesViewElement extends Components.ElsaStudioWorkflowInstancesView, HTMLStencilElement {
    }
    var HTMLElsaStudioWorkflowInstancesViewElement: {
        prototype: HTMLElsaStudioWorkflowInstancesViewElement;
        new (): HTMLElsaStudioWorkflowInstancesViewElement;
    };
    interface HTMLElsaStudioWorkflowRegistryElement extends Components.ElsaStudioWorkflowRegistry, HTMLStencilElement {
    }
    var HTMLElsaStudioWorkflowRegistryElement: {
        prototype: HTMLElsaStudioWorkflowRegistryElement;
        new (): HTMLElsaStudioWorkflowRegistryElement;
    };
    interface HTMLElsaSwitchCasesPropertyElement extends Components.ElsaSwitchCasesProperty, HTMLStencilElement {
    }
    var HTMLElsaSwitchCasesPropertyElement: {
        prototype: HTMLElsaSwitchCasesPropertyElement;
        new (): HTMLElsaSwitchCasesPropertyElement;
    };
    interface HTMLElsaToastNotificationElement extends Components.ElsaToastNotification, HTMLStencilElement {
    }
    var HTMLElsaToastNotificationElement: {
        prototype: HTMLElsaToastNotificationElement;
        new (): HTMLElsaToastNotificationElement;
    };
    interface HTMLElsaWebhookDefinitionEditorNotificationsElement extends Components.ElsaWebhookDefinitionEditorNotifications, HTMLStencilElement {
    }
    var HTMLElsaWebhookDefinitionEditorNotificationsElement: {
        prototype: HTMLElsaWebhookDefinitionEditorNotificationsElement;
        new (): HTMLElsaWebhookDefinitionEditorNotificationsElement;
    };
    interface HTMLElsaWebhookDefinitionEditorScreenElement extends Components.ElsaWebhookDefinitionEditorScreen, HTMLStencilElement {
    }
    var HTMLElsaWebhookDefinitionEditorScreenElement: {
        prototype: HTMLElsaWebhookDefinitionEditorScreenElement;
        new (): HTMLElsaWebhookDefinitionEditorScreenElement;
    };
    interface HTMLElsaWebhookDefinitionsListScreenElement extends Components.ElsaWebhookDefinitionsListScreen, HTMLStencilElement {
    }
    var HTMLElsaWebhookDefinitionsListScreenElement: {
        prototype: HTMLElsaWebhookDefinitionsListScreenElement;
        new (): HTMLElsaWebhookDefinitionsListScreenElement;
    };
    interface HTMLElsaWorkflowBlueprintSidePanelElement extends Components.ElsaWorkflowBlueprintSidePanel, HTMLStencilElement {
    }
    var HTMLElsaWorkflowBlueprintSidePanelElement: {
        prototype: HTMLElsaWorkflowBlueprintSidePanelElement;
        new (): HTMLElsaWorkflowBlueprintSidePanelElement;
    };
    interface HTMLElsaWorkflowBlueprintViewerScreenElement extends Components.ElsaWorkflowBlueprintViewerScreen, HTMLStencilElement {
    }
    var HTMLElsaWorkflowBlueprintViewerScreenElement: {
        prototype: HTMLElsaWorkflowBlueprintViewerScreenElement;
        new (): HTMLElsaWorkflowBlueprintViewerScreenElement;
    };
    interface HTMLElsaWorkflowDefinitionEditorNotificationsElement extends Components.ElsaWorkflowDefinitionEditorNotifications, HTMLStencilElement {
    }
    var HTMLElsaWorkflowDefinitionEditorNotificationsElement: {
        prototype: HTMLElsaWorkflowDefinitionEditorNotificationsElement;
        new (): HTMLElsaWorkflowDefinitionEditorNotificationsElement;
    };
    interface HTMLElsaWorkflowDefinitionEditorScreenElement extends Components.ElsaWorkflowDefinitionEditorScreen, HTMLStencilElement {
    }
    var HTMLElsaWorkflowDefinitionEditorScreenElement: {
        prototype: HTMLElsaWorkflowDefinitionEditorScreenElement;
        new (): HTMLElsaWorkflowDefinitionEditorScreenElement;
    };
    interface HTMLElsaWorkflowDefinitionsListScreenElement extends Components.ElsaWorkflowDefinitionsListScreen, HTMLStencilElement {
    }
    var HTMLElsaWorkflowDefinitionsListScreenElement: {
        prototype: HTMLElsaWorkflowDefinitionsListScreenElement;
        new (): HTMLElsaWorkflowDefinitionsListScreenElement;
    };
    interface HTMLElsaWorkflowInstanceJournalElement extends Components.ElsaWorkflowInstanceJournal, HTMLStencilElement {
    }
    var HTMLElsaWorkflowInstanceJournalElement: {
        prototype: HTMLElsaWorkflowInstanceJournalElement;
        new (): HTMLElsaWorkflowInstanceJournalElement;
    };
    interface HTMLElsaWorkflowInstanceListScreenElement extends Components.ElsaWorkflowInstanceListScreen, HTMLStencilElement {
    }
    var HTMLElsaWorkflowInstanceListScreenElement: {
        prototype: HTMLElsaWorkflowInstanceListScreenElement;
        new (): HTMLElsaWorkflowInstanceListScreenElement;
    };
    interface HTMLElsaWorkflowInstanceViewerScreenElement extends Components.ElsaWorkflowInstanceViewerScreen, HTMLStencilElement {
    }
    var HTMLElsaWorkflowInstanceViewerScreenElement: {
        prototype: HTMLElsaWorkflowInstanceViewerScreenElement;
        new (): HTMLElsaWorkflowInstanceViewerScreenElement;
    };
    interface HTMLElsaWorkflowPropertiesPanelElement extends Components.ElsaWorkflowPropertiesPanel, HTMLStencilElement {
    }
    var HTMLElsaWorkflowPropertiesPanelElement: {
        prototype: HTMLElsaWorkflowPropertiesPanelElement;
        new (): HTMLElsaWorkflowPropertiesPanelElement;
    };
    interface HTMLElsaWorkflowPublishButtonElement extends Components.ElsaWorkflowPublishButton, HTMLStencilElement {
    }
    var HTMLElsaWorkflowPublishButtonElement: {
        prototype: HTMLElsaWorkflowPublishButtonElement;
        new (): HTMLElsaWorkflowPublishButtonElement;
    };
    interface HTMLElsaWorkflowRegistryListScreenElement extends Components.ElsaWorkflowRegistryListScreen, HTMLStencilElement {
    }
    var HTMLElsaWorkflowRegistryListScreenElement: {
        prototype: HTMLElsaWorkflowRegistryListScreenElement;
        new (): HTMLElsaWorkflowRegistryListScreenElement;
    };
    interface HTMLElsaWorkflowSettingsModalElement extends Components.ElsaWorkflowSettingsModal, HTMLStencilElement {
    }
    var HTMLElsaWorkflowSettingsModalElement: {
        prototype: HTMLElsaWorkflowSettingsModalElement;
        new (): HTMLElsaWorkflowSettingsModalElement;
    };
    interface HTMLElementTagNameMap {
        "elsa-activity-editor-modal": HTMLElsaActivityEditorModalElement;
        "elsa-activity-picker-modal": HTMLElsaActivityPickerModalElement;
        "elsa-check-list-property": HTMLElsaCheckListPropertyElement;
        "elsa-checkbox-property": HTMLElsaCheckboxPropertyElement;
        "elsa-confirm-dialog": HTMLElsaConfirmDialogElement;
        "elsa-context-menu": HTMLElsaContextMenuElement;
        "elsa-control": HTMLElsaControlElement;
        "elsa-designer-tree": HTMLElsaDesignerTreeElement;
        "elsa-dropdown-button": HTMLElsaDropdownButtonElement;
        "elsa-dropdown-property": HTMLElsaDropdownPropertyElement;
        "elsa-expression-editor": HTMLElsaExpressionEditorElement;
        "elsa-input-tags": HTMLElsaInputTagsElement;
        "elsa-input-tags-dropdown": HTMLElsaInputTagsDropdownElement;
        "elsa-json-property": HTMLElsaJsonPropertyElement;
        "elsa-modal-dialog": HTMLElsaModalDialogElement;
        "elsa-monaco": HTMLElsaMonacoElement;
        "elsa-multi-expression-editor": HTMLElsaMultiExpressionEditorElement;
        "elsa-multi-line-property": HTMLElsaMultiLinePropertyElement;
        "elsa-multi-text-property": HTMLElsaMultiTextPropertyElement;
        "elsa-pager": HTMLElsaPagerElement;
        "elsa-property-editor": HTMLElsaPropertyEditorElement;
        "elsa-radio-list-property": HTMLElsaRadioListPropertyElement;
        "elsa-script-property": HTMLElsaScriptPropertyElement;
        "elsa-single-line-property": HTMLElsaSingleLinePropertyElement;
        "elsa-studio-dashboard": HTMLElsaStudioDashboardElement;
        "elsa-studio-home": HTMLElsaStudioHomeElement;
        "elsa-studio-root": HTMLElsaStudioRootElement;
        "elsa-studio-webhook-definitions-edit": HTMLElsaStudioWebhookDefinitionsEditElement;
        "elsa-studio-webhook-definitions-list": HTMLElsaStudioWebhookDefinitionsListElement;
        "elsa-studio-workflow-blueprint-view": HTMLElsaStudioWorkflowBlueprintViewElement;
        "elsa-studio-workflow-definitions-edit": HTMLElsaStudioWorkflowDefinitionsEditElement;
        "elsa-studio-workflow-definitions-list": HTMLElsaStudioWorkflowDefinitionsListElement;
        "elsa-studio-workflow-instances-list": HTMLElsaStudioWorkflowInstancesListElement;
        "elsa-studio-workflow-instances-view": HTMLElsaStudioWorkflowInstancesViewElement;
        "elsa-studio-workflow-registry": HTMLElsaStudioWorkflowRegistryElement;
        "elsa-switch-cases-property": HTMLElsaSwitchCasesPropertyElement;
        "elsa-toast-notification": HTMLElsaToastNotificationElement;
        "elsa-webhook-definition-editor-notifications": HTMLElsaWebhookDefinitionEditorNotificationsElement;
        "elsa-webhook-definition-editor-screen": HTMLElsaWebhookDefinitionEditorScreenElement;
        "elsa-webhook-definitions-list-screen": HTMLElsaWebhookDefinitionsListScreenElement;
        "elsa-workflow-blueprint-side-panel": HTMLElsaWorkflowBlueprintSidePanelElement;
        "elsa-workflow-blueprint-viewer-screen": HTMLElsaWorkflowBlueprintViewerScreenElement;
        "elsa-workflow-definition-editor-notifications": HTMLElsaWorkflowDefinitionEditorNotificationsElement;
        "elsa-workflow-definition-editor-screen": HTMLElsaWorkflowDefinitionEditorScreenElement;
        "elsa-workflow-definitions-list-screen": HTMLElsaWorkflowDefinitionsListScreenElement;
        "elsa-workflow-instance-journal": HTMLElsaWorkflowInstanceJournalElement;
        "elsa-workflow-instance-list-screen": HTMLElsaWorkflowInstanceListScreenElement;
        "elsa-workflow-instance-viewer-screen": HTMLElsaWorkflowInstanceViewerScreenElement;
        "elsa-workflow-properties-panel": HTMLElsaWorkflowPropertiesPanelElement;
        "elsa-workflow-publish-button": HTMLElsaWorkflowPublishButtonElement;
        "elsa-workflow-registry-list-screen": HTMLElsaWorkflowRegistryListScreenElement;
        "elsa-workflow-settings-modal": HTMLElsaWorkflowSettingsModalElement;
    }
}
declare namespace LocalJSX {
    interface ElsaActivityEditorModal {
        "culture"?: string;
    }
    interface ElsaActivityPickerModal {
    }
    interface ElsaCheckListProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "serverUrl"?: string;
    }
    interface ElsaCheckboxProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface ElsaConfirmDialog {
        "culture"?: string;
    }
    interface ElsaContextMenu {
        "history"?: RouterHistory;
        "menuItems"?: Array<MenuItem>;
    }
    interface ElsaControl {
        "content"?: VNode | string | Element;
    }
    interface ElsaDesignerTree {
        "activityBorderColor"?: (activity: ActivityModel) => string;
        "activityContextMenu"?: ActivityContextMenuState;
        "activityContextMenuButton"?: (activity: ActivityModel) => string;
        "connectionContextMenu"?: ActivityContextMenuState;
        "enableMultipleConnectionsFromSingleSource"?: boolean;
        "layoutDirection"?: LayoutDirection;
        "mode"?: WorkflowDesignerMode;
        "model"?: WorkflowModel;
        "onActivityContextMenuButtonClicked"?: (event: CustomEvent<ActivityContextMenuState>) => void;
        "onActivityDeselected"?: (event: CustomEvent<ActivityModel>) => void;
        "onActivitySelected"?: (event: CustomEvent<ActivityModel>) => void;
        "onConnectionContextMenuButtonClicked"?: (event: CustomEvent<ActivityContextMenuState>) => void;
        "onWorkflow-changed"?: (event: CustomEvent<WorkflowModel>) => void;
        "selectedActivityIds"?: Array<string>;
    }
    interface ElsaDropdownButton {
        "icon"?: any;
        "items"?: Array<DropdownButtonItem>;
        "onItemSelected"?: (event: CustomEvent<DropdownButtonItem>) => void;
        "origin"?: DropdownButtonOrigin;
        "text"?: string;
    }
    interface ElsaDropdownProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "serverUrl"?: string;
    }
    interface ElsaExpressionEditor {
        "context"?: string;
        "editorHeight"?: string;
        "expression"?: string;
        "language"?: string;
        "onExpressionChanged"?: (event: CustomEvent<string>) => void;
        "padding"?: string;
        "serverUrl"?: string;
        "singleLineMode"?: boolean;
        "workflowDefinitionId"?: string;
    }
    interface ElsaInputTags {
        "fieldId"?: string;
        "fieldName"?: string;
        "onValueChanged"?: (event: CustomEvent<Array<string>>) => void;
        "placeHolder"?: string;
        "values"?: Array<string>;
    }
    interface ElsaInputTagsDropdown {
        "dropdownValues"?: Array<SelectListItem>;
        "fieldId"?: string;
        "fieldName"?: string;
        "onValueChanged"?: (event: CustomEvent<Array<string | SelectListItem>>) => void;
        "placeHolder"?: string;
        "values"?: Array<string | SelectListItem>;
    }
    interface ElsaJsonProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface ElsaModalDialog {
    }
    interface ElsaMonaco {
        "editorHeight"?: string;
        "language"?: string;
        "onValueChanged"?: (event: CustomEvent<MonacoValueChangedArgs>) => void;
        "padding"?: string;
        "singleLineMode"?: boolean;
        "value"?: string;
    }
    interface ElsaMultiExpressionEditor {
        "context"?: string;
        "defaultSyntax"?: string;
        "editorHeight"?: string;
        "expressions"?: Map<string>;
        "fieldName"?: string;
        "isReadOnly"?: boolean;
        "label"?: string;
        "onExpressionChanged"?: (event: CustomEvent<string>) => void;
        "onSyntaxChanged"?: (event: CustomEvent<string>) => void;
        "singleLineMode"?: boolean;
        "supportedSyntaxes"?: Array<string>;
        "syntax"?: string;
    }
    interface ElsaMultiLineProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface ElsaMultiTextProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "serverUrl"?: string;
    }
    interface ElsaPager {
        "culture"?: string;
        "history"?: RouterHistory;
        "location"?: LocationSegments;
        "onPaged"?: (event: CustomEvent<PagerData>) => void;
        "page"?: number;
        "pageSize"?: number;
        "totalCount"?: number;
    }
    interface ElsaPropertyEditor {
        "context"?: string;
        "editorHeight"?: string;
        "onDefaultSyntaxValueChanged"?: (event: CustomEvent<string>) => void;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "showLabel"?: boolean;
        "singleLineMode"?: boolean;
    }
    interface ElsaRadioListProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "serverUrl"?: string;
    }
    interface ElsaScriptProperty {
        "context"?: string;
        "editorHeight"?: string;
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
        "serverUrl"?: string;
        "singleLineMode"?: boolean;
        "syntax"?: string;
        "workflowDefinitionId"?: string;
    }
    interface ElsaSingleLineProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface ElsaStudioDashboard {
        "basePath"?: string;
        "culture"?: string;
    }
    interface ElsaStudioHome {
        "culture"?: string;
    }
    interface ElsaStudioRoot {
        "basePath"?: string;
        "culture"?: string;
        "featuresString"?: string;
        "monacoLibPath"?: string;
        "onInitializing"?: (event: CustomEvent<ElsaStudio>) => void;
        "serverUrl"?: string;
    }
    interface ElsaStudioWebhookDefinitionsEdit {
        "match"?: MatchResults;
    }
    interface ElsaStudioWebhookDefinitionsList {
        "basePath"?: string;
        "culture"?: string;
    }
    interface ElsaStudioWorkflowBlueprintView {
        "match"?: MatchResults;
    }
    interface ElsaStudioWorkflowDefinitionsEdit {
        "match"?: MatchResults;
    }
    interface ElsaStudioWorkflowDefinitionsList {
        "basePath"?: string;
        "culture"?: string;
        "history"?: RouterHistory;
    }
    interface ElsaStudioWorkflowInstancesList {
        "culture"?: string;
    }
    interface ElsaStudioWorkflowInstancesView {
        "match"?: MatchResults;
    }
    interface ElsaStudioWorkflowRegistry {
        "basePath"?: string;
        "culture"?: string;
    }
    interface ElsaSwitchCasesProperty {
        "propertyDescriptor"?: ActivityPropertyDescriptor;
        "propertyModel"?: ActivityDefinitionProperty;
    }
    interface ElsaToastNotification {
    }
    interface ElsaWebhookDefinitionEditorNotifications {
    }
    interface ElsaWebhookDefinitionEditorScreen {
        "culture"?: string;
        "history"?: RouterHistory;
        "serverUrl"?: string;
        "webhookDefinition"?: WebhookDefinition;
        "webhookId"?: string;
    }
    interface ElsaWebhookDefinitionsListScreen {
        "basePath"?: string;
        "culture"?: string;
        "history"?: RouterHistory;
        "serverUrl"?: string;
    }
    interface ElsaWorkflowBlueprintSidePanel {
        "serverUrl"?: string;
        "workflowId"?: string;
    }
    interface ElsaWorkflowBlueprintViewerScreen {
        "culture"?: string;
        "serverUrl"?: string;
        "workflowDefinitionId"?: string;
    }
    interface ElsaWorkflowDefinitionEditorNotifications {
    }
    interface ElsaWorkflowDefinitionEditorScreen {
        "culture"?: string;
        "history"?: RouterHistory;
        "monacoLibPath"?: string;
        "onWorkflowSaved"?: (event: CustomEvent<WorkflowDefinition>) => void;
        "serverUrl"?: string;
        "workflowDefinitionId"?: string;
    }
    interface ElsaWorkflowDefinitionsListScreen {
        "basePath"?: string;
        "culture"?: string;
        "history"?: RouterHistory;
        "serverUrl"?: string;
    }
    interface ElsaWorkflowInstanceJournal {
        "activityDescriptors"?: Array<ActivityDescriptor>;
        "onRecordSelected"?: (event: CustomEvent<WorkflowExecutionLogRecord>) => void;
        "serverUrl"?: string;
        "workflowBlueprint"?: WorkflowBlueprint;
        "workflowInstanceId"?: string;
        "workflowModel"?: WorkflowModel;
    }
    interface ElsaWorkflowInstanceListScreen {
        "basePath"?: string;
        "culture"?: string;
        "history"?: RouterHistory;
        "orderBy"?: OrderBy;
        "serverUrl"?: string;
        "workflowId"?: string;
        "workflowStatus"?: WorkflowStatus;
    }
    interface ElsaWorkflowInstanceViewerScreen {
        "culture"?: string;
        "serverUrl"?: string;
        "workflowInstanceId"?: string;
    }
    interface ElsaWorkflowPropertiesPanel {
        "culture"?: string;
        "expandButtonPosition"?: number;
        "serverUrl"?: string;
        "workflowDefinition"?: WorkflowDefinition;
    }
    interface ElsaWorkflowPublishButton {
        "culture"?: string;
        "onExportClicked"?: (event: CustomEvent<any>) => void;
        "onImportClicked"?: (event: CustomEvent<File>) => void;
        "onPublishClicked"?: (event: CustomEvent<any>) => void;
        "onUnPublishClicked"?: (event: CustomEvent<any>) => void;
        "publishing"?: boolean;
        "workflowDefinition"?: WorkflowDefinition;
    }
    interface ElsaWorkflowRegistryListScreen {
        "basePath"?: string;
        "culture"?: string;
        "history"?: RouterHistory;
        "serverUrl"?: string;
    }
    interface ElsaWorkflowSettingsModal {
        "serverUrl"?: string;
        "workflowDefinition"?: WorkflowDefinition;
    }
    interface IntrinsicElements {
        "elsa-activity-editor-modal": ElsaActivityEditorModal;
        "elsa-activity-picker-modal": ElsaActivityPickerModal;
        "elsa-check-list-property": ElsaCheckListProperty;
        "elsa-checkbox-property": ElsaCheckboxProperty;
        "elsa-confirm-dialog": ElsaConfirmDialog;
        "elsa-context-menu": ElsaContextMenu;
        "elsa-control": ElsaControl;
        "elsa-designer-tree": ElsaDesignerTree;
        "elsa-dropdown-button": ElsaDropdownButton;
        "elsa-dropdown-property": ElsaDropdownProperty;
        "elsa-expression-editor": ElsaExpressionEditor;
        "elsa-input-tags": ElsaInputTags;
        "elsa-input-tags-dropdown": ElsaInputTagsDropdown;
        "elsa-json-property": ElsaJsonProperty;
        "elsa-modal-dialog": ElsaModalDialog;
        "elsa-monaco": ElsaMonaco;
        "elsa-multi-expression-editor": ElsaMultiExpressionEditor;
        "elsa-multi-line-property": ElsaMultiLineProperty;
        "elsa-multi-text-property": ElsaMultiTextProperty;
        "elsa-pager": ElsaPager;
        "elsa-property-editor": ElsaPropertyEditor;
        "elsa-radio-list-property": ElsaRadioListProperty;
        "elsa-script-property": ElsaScriptProperty;
        "elsa-single-line-property": ElsaSingleLineProperty;
        "elsa-studio-dashboard": ElsaStudioDashboard;
        "elsa-studio-home": ElsaStudioHome;
        "elsa-studio-root": ElsaStudioRoot;
        "elsa-studio-webhook-definitions-edit": ElsaStudioWebhookDefinitionsEdit;
        "elsa-studio-webhook-definitions-list": ElsaStudioWebhookDefinitionsList;
        "elsa-studio-workflow-blueprint-view": ElsaStudioWorkflowBlueprintView;
        "elsa-studio-workflow-definitions-edit": ElsaStudioWorkflowDefinitionsEdit;
        "elsa-studio-workflow-definitions-list": ElsaStudioWorkflowDefinitionsList;
        "elsa-studio-workflow-instances-list": ElsaStudioWorkflowInstancesList;
        "elsa-studio-workflow-instances-view": ElsaStudioWorkflowInstancesView;
        "elsa-studio-workflow-registry": ElsaStudioWorkflowRegistry;
        "elsa-switch-cases-property": ElsaSwitchCasesProperty;
        "elsa-toast-notification": ElsaToastNotification;
        "elsa-webhook-definition-editor-notifications": ElsaWebhookDefinitionEditorNotifications;
        "elsa-webhook-definition-editor-screen": ElsaWebhookDefinitionEditorScreen;
        "elsa-webhook-definitions-list-screen": ElsaWebhookDefinitionsListScreen;
        "elsa-workflow-blueprint-side-panel": ElsaWorkflowBlueprintSidePanel;
        "elsa-workflow-blueprint-viewer-screen": ElsaWorkflowBlueprintViewerScreen;
        "elsa-workflow-definition-editor-notifications": ElsaWorkflowDefinitionEditorNotifications;
        "elsa-workflow-definition-editor-screen": ElsaWorkflowDefinitionEditorScreen;
        "elsa-workflow-definitions-list-screen": ElsaWorkflowDefinitionsListScreen;
        "elsa-workflow-instance-journal": ElsaWorkflowInstanceJournal;
        "elsa-workflow-instance-list-screen": ElsaWorkflowInstanceListScreen;
        "elsa-workflow-instance-viewer-screen": ElsaWorkflowInstanceViewerScreen;
        "elsa-workflow-properties-panel": ElsaWorkflowPropertiesPanel;
        "elsa-workflow-publish-button": ElsaWorkflowPublishButton;
        "elsa-workflow-registry-list-screen": ElsaWorkflowRegistryListScreen;
        "elsa-workflow-settings-modal": ElsaWorkflowSettingsModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "elsa-activity-editor-modal": LocalJSX.ElsaActivityEditorModal & JSXBase.HTMLAttributes<HTMLElsaActivityEditorModalElement>;
            "elsa-activity-picker-modal": LocalJSX.ElsaActivityPickerModal & JSXBase.HTMLAttributes<HTMLElsaActivityPickerModalElement>;
            "elsa-check-list-property": LocalJSX.ElsaCheckListProperty & JSXBase.HTMLAttributes<HTMLElsaCheckListPropertyElement>;
            "elsa-checkbox-property": LocalJSX.ElsaCheckboxProperty & JSXBase.HTMLAttributes<HTMLElsaCheckboxPropertyElement>;
            "elsa-confirm-dialog": LocalJSX.ElsaConfirmDialog & JSXBase.HTMLAttributes<HTMLElsaConfirmDialogElement>;
            "elsa-context-menu": LocalJSX.ElsaContextMenu & JSXBase.HTMLAttributes<HTMLElsaContextMenuElement>;
            "elsa-control": LocalJSX.ElsaControl & JSXBase.HTMLAttributes<HTMLElsaControlElement>;
            "elsa-designer-tree": LocalJSX.ElsaDesignerTree & JSXBase.HTMLAttributes<HTMLElsaDesignerTreeElement>;
            "elsa-dropdown-button": LocalJSX.ElsaDropdownButton & JSXBase.HTMLAttributes<HTMLElsaDropdownButtonElement>;
            "elsa-dropdown-property": LocalJSX.ElsaDropdownProperty & JSXBase.HTMLAttributes<HTMLElsaDropdownPropertyElement>;
            "elsa-expression-editor": LocalJSX.ElsaExpressionEditor & JSXBase.HTMLAttributes<HTMLElsaExpressionEditorElement>;
            "elsa-input-tags": LocalJSX.ElsaInputTags & JSXBase.HTMLAttributes<HTMLElsaInputTagsElement>;
            "elsa-input-tags-dropdown": LocalJSX.ElsaInputTagsDropdown & JSXBase.HTMLAttributes<HTMLElsaInputTagsDropdownElement>;
            "elsa-json-property": LocalJSX.ElsaJsonProperty & JSXBase.HTMLAttributes<HTMLElsaJsonPropertyElement>;
            "elsa-modal-dialog": LocalJSX.ElsaModalDialog & JSXBase.HTMLAttributes<HTMLElsaModalDialogElement>;
            "elsa-monaco": LocalJSX.ElsaMonaco & JSXBase.HTMLAttributes<HTMLElsaMonacoElement>;
            "elsa-multi-expression-editor": LocalJSX.ElsaMultiExpressionEditor & JSXBase.HTMLAttributes<HTMLElsaMultiExpressionEditorElement>;
            "elsa-multi-line-property": LocalJSX.ElsaMultiLineProperty & JSXBase.HTMLAttributes<HTMLElsaMultiLinePropertyElement>;
            "elsa-multi-text-property": LocalJSX.ElsaMultiTextProperty & JSXBase.HTMLAttributes<HTMLElsaMultiTextPropertyElement>;
            "elsa-pager": LocalJSX.ElsaPager & JSXBase.HTMLAttributes<HTMLElsaPagerElement>;
            "elsa-property-editor": LocalJSX.ElsaPropertyEditor & JSXBase.HTMLAttributes<HTMLElsaPropertyEditorElement>;
            "elsa-radio-list-property": LocalJSX.ElsaRadioListProperty & JSXBase.HTMLAttributes<HTMLElsaRadioListPropertyElement>;
            "elsa-script-property": LocalJSX.ElsaScriptProperty & JSXBase.HTMLAttributes<HTMLElsaScriptPropertyElement>;
            "elsa-single-line-property": LocalJSX.ElsaSingleLineProperty & JSXBase.HTMLAttributes<HTMLElsaSingleLinePropertyElement>;
            "elsa-studio-dashboard": LocalJSX.ElsaStudioDashboard & JSXBase.HTMLAttributes<HTMLElsaStudioDashboardElement>;
            "elsa-studio-home": LocalJSX.ElsaStudioHome & JSXBase.HTMLAttributes<HTMLElsaStudioHomeElement>;
            "elsa-studio-root": LocalJSX.ElsaStudioRoot & JSXBase.HTMLAttributes<HTMLElsaStudioRootElement>;
            "elsa-studio-webhook-definitions-edit": LocalJSX.ElsaStudioWebhookDefinitionsEdit & JSXBase.HTMLAttributes<HTMLElsaStudioWebhookDefinitionsEditElement>;
            "elsa-studio-webhook-definitions-list": LocalJSX.ElsaStudioWebhookDefinitionsList & JSXBase.HTMLAttributes<HTMLElsaStudioWebhookDefinitionsListElement>;
            "elsa-studio-workflow-blueprint-view": LocalJSX.ElsaStudioWorkflowBlueprintView & JSXBase.HTMLAttributes<HTMLElsaStudioWorkflowBlueprintViewElement>;
            "elsa-studio-workflow-definitions-edit": LocalJSX.ElsaStudioWorkflowDefinitionsEdit & JSXBase.HTMLAttributes<HTMLElsaStudioWorkflowDefinitionsEditElement>;
            "elsa-studio-workflow-definitions-list": LocalJSX.ElsaStudioWorkflowDefinitionsList & JSXBase.HTMLAttributes<HTMLElsaStudioWorkflowDefinitionsListElement>;
            "elsa-studio-workflow-instances-list": LocalJSX.ElsaStudioWorkflowInstancesList & JSXBase.HTMLAttributes<HTMLElsaStudioWorkflowInstancesListElement>;
            "elsa-studio-workflow-instances-view": LocalJSX.ElsaStudioWorkflowInstancesView & JSXBase.HTMLAttributes<HTMLElsaStudioWorkflowInstancesViewElement>;
            "elsa-studio-workflow-registry": LocalJSX.ElsaStudioWorkflowRegistry & JSXBase.HTMLAttributes<HTMLElsaStudioWorkflowRegistryElement>;
            "elsa-switch-cases-property": LocalJSX.ElsaSwitchCasesProperty & JSXBase.HTMLAttributes<HTMLElsaSwitchCasesPropertyElement>;
            "elsa-toast-notification": LocalJSX.ElsaToastNotification & JSXBase.HTMLAttributes<HTMLElsaToastNotificationElement>;
            "elsa-webhook-definition-editor-notifications": LocalJSX.ElsaWebhookDefinitionEditorNotifications & JSXBase.HTMLAttributes<HTMLElsaWebhookDefinitionEditorNotificationsElement>;
            "elsa-webhook-definition-editor-screen": LocalJSX.ElsaWebhookDefinitionEditorScreen & JSXBase.HTMLAttributes<HTMLElsaWebhookDefinitionEditorScreenElement>;
            "elsa-webhook-definitions-list-screen": LocalJSX.ElsaWebhookDefinitionsListScreen & JSXBase.HTMLAttributes<HTMLElsaWebhookDefinitionsListScreenElement>;
            "elsa-workflow-blueprint-side-panel": LocalJSX.ElsaWorkflowBlueprintSidePanel & JSXBase.HTMLAttributes<HTMLElsaWorkflowBlueprintSidePanelElement>;
            "elsa-workflow-blueprint-viewer-screen": LocalJSX.ElsaWorkflowBlueprintViewerScreen & JSXBase.HTMLAttributes<HTMLElsaWorkflowBlueprintViewerScreenElement>;
            "elsa-workflow-definition-editor-notifications": LocalJSX.ElsaWorkflowDefinitionEditorNotifications & JSXBase.HTMLAttributes<HTMLElsaWorkflowDefinitionEditorNotificationsElement>;
            "elsa-workflow-definition-editor-screen": LocalJSX.ElsaWorkflowDefinitionEditorScreen & JSXBase.HTMLAttributes<HTMLElsaWorkflowDefinitionEditorScreenElement>;
            "elsa-workflow-definitions-list-screen": LocalJSX.ElsaWorkflowDefinitionsListScreen & JSXBase.HTMLAttributes<HTMLElsaWorkflowDefinitionsListScreenElement>;
            "elsa-workflow-instance-journal": LocalJSX.ElsaWorkflowInstanceJournal & JSXBase.HTMLAttributes<HTMLElsaWorkflowInstanceJournalElement>;
            "elsa-workflow-instance-list-screen": LocalJSX.ElsaWorkflowInstanceListScreen & JSXBase.HTMLAttributes<HTMLElsaWorkflowInstanceListScreenElement>;
            "elsa-workflow-instance-viewer-screen": LocalJSX.ElsaWorkflowInstanceViewerScreen & JSXBase.HTMLAttributes<HTMLElsaWorkflowInstanceViewerScreenElement>;
            "elsa-workflow-properties-panel": LocalJSX.ElsaWorkflowPropertiesPanel & JSXBase.HTMLAttributes<HTMLElsaWorkflowPropertiesPanelElement>;
            "elsa-workflow-publish-button": LocalJSX.ElsaWorkflowPublishButton & JSXBase.HTMLAttributes<HTMLElsaWorkflowPublishButtonElement>;
            "elsa-workflow-registry-list-screen": LocalJSX.ElsaWorkflowRegistryListScreen & JSXBase.HTMLAttributes<HTMLElsaWorkflowRegistryListScreenElement>;
            "elsa-workflow-settings-modal": LocalJSX.ElsaWorkflowSettingsModal & JSXBase.HTMLAttributes<HTMLElsaWorkflowSettingsModalElement>;
        }
    }
}
