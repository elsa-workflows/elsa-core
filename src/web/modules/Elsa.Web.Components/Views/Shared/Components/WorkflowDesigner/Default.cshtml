@using Elsa.Extensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Serialization
@model WorkflowDesignerViewModel
@{
    var serializerSettings = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };
    var workflowMetadataJson = JsonConvert.SerializeObject(Model.Workflow.Metadata, serializerSettings);
    var connectionsJson = JsonConvert.SerializeObject(Model.Connections, serializerSettings);
    var executionLogJson = JsonConvert.SerializeObject(Model.Workflow.ExecutionLog);
}
<div id="elsa-workflow-designer">
    <div class="workflow-canvas" 
         data-workflow-id="@Model.Workflow.Id"
         data-workflow-is-definition="@Model.Workflow.IsDefinition().ToString().ToLower()"
         data-workflow-metadata="@workflowMetadataJson" 
         data-workflow-status="@Model.Workflow.Status"
         data-workflow-connections="@connectionsJson"
         data-workflow-execution-log="@executionLogJson">
        @foreach (var activityShape in Model.ActivityShapes)
        {
            @await DisplayAsync(activityShape)
        }
        <div class="dropdown-menu context-menu canvas-context-menu">
            <a class="dropdown-item" href="#add-trigger">Add Trigger</a>
            <a class="dropdown-item" href="#add-action">Add Action</a>
            <a class="dropdown-item" href="#export">Export</a>
        </div>
    </div>
</div>

<style asp-name="elsa-workflow-editor-style" asp-src="~/Elsa.Web.Components/workflow-designer.css"></style>
<script asp-name="elsa-workflow-script" asp-src="~/Elsa.Web.Components/workflow-designer.js" at="Foot"></script>